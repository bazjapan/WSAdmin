<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" preinitialize="preInit()" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" creationComplete="cc()" width="100%" height="100%" xmlns:audio="views.audio.*" xmlns:audio1="views.request.audio.*" xmlns:views="views.*" xmlns:buttons="views.buttons.*">
	<s:layout>
		<s:VerticalLayout paddingBottom="3" paddingLeft="3" paddingRight="3" paddingTop="3"/>
	</s:layout>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<s:states>
		<s:State name="disabled"/>
		<s:State name="start" />
		<s:State name="recorder"/>
		<s:State name="addFromProvider"/>
		<s:State name="addFromWeb"/>
		<s:State name="addFiles"/>
		<s:State name="audioList"/>
	</s:states>
	<fx:Script>
		<![CDATA[
			import com.pbsmediatech.json.utils.extractResultResult;
			
			import jp.wordsmart.DomainSettings;
			import jp.wordsmart.WordSmartConstants;
			import jp.wordsmart.assets.IconLib;
			import jp.wordsmart.dto.WSAudio;
			import jp.wordsmart.events.AudioEvent;

			import jp.wordsmart.json.controllers.WSAudioController;
			import jp.wordsmart.model.AppModel;
			import jp.wordsmart.upload.ObjectUploader;
			import jp.wordsmart.utils.ProgressBarHelper;
			import jp.wordsmart.utils.audio.ConvertToWAV;
			import jp.wordsmart.utils.audio.mp3.ConvertWAVtoMP3;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.events.ItemClickEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.ResultEvent;
			
			import spark.components.TitleWindow;
			
			import utils.date.now;
			import utils.mp3.writeTags;
			import utils.object.clone;
			private var stateInfo:Array = [{"long_label":"Record Your Voice","label":"Record","icon":IconLib.MICROPHONE_16, 'state':'recorder'}, 
				{"long_label":"Get Audio From Text to Speech","label":"Text to Speech","icon":IconLib.TEXT_16, 'state':'addFromProvider'},
				{"long_label":"Add Audio from the Web","label":"Add From Web","icon":IconLib.GLOBE_16, 'state':'addFromWeb'},
				{"long_label":"Add Audio from your Computer","label":"Add Files","icon":IconLib.ADD_16, 'state':'addFiles'},
				{"long_label":"Show Audio List","label":"Audio List","icon":IconLib.LIST_BULLETS_16, 'state':'audioList'}
			]
			protected function toggle_states_itemClickHandler(event:ItemClickEvent = null):void
			{
				this.currentState = stateInfo[toggle_states.selectedIndex]['state'];
			}	
			[Bindable]
			public var recentlyAdded:ArrayCollection = new ArrayCollection;
			
			
			private function preInit():void
			{
			}
			private function cc():void
			{
				//will get an event with an audio object and choose index accordingly
				goToState("start");
			}
			private var tagWindow:TitleWindow;
			private var lastX:int = -1;
			private var lastY:int;
			
			public function showAudioTagger(audio:WSAudio, closeFunc:Function, remove:Boolean = false):void
			{
				PopUpManager.removePopUp(tagWindow);
				if(remove){return}
				if(!tagWindow){tagWindow = new TitleWindow;
					
					tagWindow.addEventListener(CloseEvent.CLOSE, function(ce:CloseEvent):void
					{
						PopUpManager.removePopUp(tagWindow);
						lastX = tagWindow.x;
						lastY = tagWindow.y;
						closeFunc();
						
					});
					var te:AudioTagEditor = new AudioTagEditor();
					tagWindow.addElement(te);		
				}
				else
				{
					lastX = tagWindow.x;
					lastY = tagWindow.y;
				}
				
				AudioTagEditor(tagWindow.getElementAt(0)).audio = audio;
				PopUpManager.addPopUp(tagWindow,this);
				
				if(lastX == -1)
				{
				PopUpManager.centerPopUp(tagWindow);
				}
				else
				{
					tagWindow.x = lastX;
					tagWindow.y = lastY;
				}
				
			}
			
			public function convertToWAV(sourceData:ByteArray, completeCallback:Function):void
			{
				new ConvertToWAV().convert(sourceData,
					function(wav:ByteArray):void
					{
						completeCallback(wav);
						hideProgress();
					},
					function(perc:Number):void
					{
						showProgress("Processing Audio", perc);
					});
			}
			
				
			public function convertToMP3(wav:ByteArray, completeCallback:Function):void
			{
				new ConvertWAVtoMP3().convert(wav,
					function(mp3:ByteArray):void
					{
						completeCallback(mp3);
						hideProgress();
					},
					function(perc:Number):void
					{
						showProgress("Encoding MP3", perc);
					});
			
			}
			private var audioUploader:ObjectUploader;
			public function uploadAudio(mp3ByteArray:ByteArray, completeFunc:Function):void
			{
			mp3ByteArray =	writeTags(mp3ByteArray,"WordSmart Download",AppModel.getInstance().signedInContributor.user_login,"WordSmart Audio",now().getFullYear().toString(),WordSmartConstants.WEB_URL);
			showProgress("Uploading Audio", 100);
			if(!audioUploader){
				audioUploader = new ObjectUploader();
				audioUploader.completeFunc = function(returnedURL:String):void
				{
					completeFunc(returnedURL);
					hideProgress();
				}
				audioUploader.progressFunc = function(perc:Number):void{
					showProgress("Uploading Audio", perc);
				}
					audioUploader.errorFunc = function():void
					{
						hideProgress();
						Alert.show("Unable to Upload Audio", "Upload Error");
					}
			}
			audioUploader.uploadAudio(mp3ByteArray, now().getTime().toString()+".mp3", "audio/mpeg");
			}
			private var downLoadPop:TitleWindow;
			public function downloadByteArray(ba:ByteArray, completeCallback:Function = null):void
			{
				//returns void;
				
				if(!downLoadPop)
				{
				//once
				downLoadPop = new TitleWindow;
				downLoadPop.title = "Choose File Type";
				downLoadPop.addEventListener(CloseEvent.CLOSE, function(ce:CloseEvent):void
				{
				PopUpManager.removePopUp(downLoadPop);	
				});
				var adtc:AudioDownloadFileTypeChooser = new AudioDownloadFileTypeChooser;	
				downLoadPop.addElement(adtc);
				}
				//everytime
				AudioDownloadFileTypeChooser(downLoadPop.getElementAt(0)).choiceMade = function(choice:String):void
				{
					PopUpManager.removePopUp(downLoadPop);	
					if(choice == "WAV")
					{
						downloadToUserMachine(ba, choice,function():void
							{
								trace("WAV Download Complete");
								if(completeCallback != null){completeCallback()};
							});
						
					}
					if(choice == "MP3")
					{
						convertToWAV(ba,function(encodedToWav:ByteArray):void
						{
							
						convertToMP3(encodedToWav, function(encodedToMP3:ByteArray):void{
							encodedToMP3 = writeTags(encodedToMP3,"WordSmart Download",AppModel.getInstance().signedInContributor.user_login,"WordSmart Audio",now().getFullYear().toString(),WordSmartConstants.WEB_URL);
							
							downloadToUserMachine(encodedToMP3, choice,function():void
							{
								if(completeCallback != null){completeCallback()};
							});
							
						});
						
						
						});
					}
				}
				
				PopUpManager.addPopUp(downLoadPop,this);
				PopUpManager.centerPopUp(downLoadPop);
				
				
			}
			/* public function downloadFromURL(url:String, completeFunc:Function):void
			{
				//returns void
				
				downloadToFileFromURL(url,
				function(ba:ByteArray):void
				{
					hideProgress();
					
					downloadToUserMachine(ba,"MP3",function():void
					{completeFunc()});
				},
				function(perc:Number):void
				{
					showProgress("Downloading Audio",perc); 
				});
					
			} */
			
			private var fr:FileReference
			private function downloadToUserMachine(encodedToWavOrMp3:ByteArray, type:String, callback:Function):void
			{
				var fr:FileReference = new FileReference();
				fr.save(encodedToWavOrMp3, "ws-audio-"+now().getTime().toString()+"."+type.toLowerCase());
			}
			
			public function goToState(state:String):void
			{
				var index:int = 0;
				for each (var obj:Object in stateInfo)
				{
					if(state == obj["state"])
					{
						toggle_states.selectedIndex = index;
						break;
					}
					index++;
				}
				currentState = state;
				
			}

			
			
			
			private var progressHelper:ProgressBarHelper
			public function showProgress(message:String, perc:Number = 100):void
			{
				if(!progressHelper){progressHelper = new ProgressBarHelper(progressBar)};
				progressHelper.enableProgress(message,perc);
			}
			public function hideProgress():void
			{
				progressHelper.disableProgress();
			}
			public function registerAudio(audio:WSAudio, completeFunc:Function):void
			{
				var audioController:WSAudioController = new WSAudioController(DomainSettings.API_URL);
				showProgress("Registering Audio",100);
				audioController.add_ws_audio(audio, function(evt:ResultEvent):void
				{
					hideProgress();
					audio.audio_ID = Number(extractResultResult(evt));
					recentlyAdded.addItem(new WSAudio(clone(audio)));
					completeFunc(audio);
					trace("now tell the app all about the new audio objects?" +evt.result)
					dispatchEvent(new AudioEvent(AudioEvent.AUDIO_REGISTERED_EVENT,audio,true));
				});
			}
			
			public function updateAudio(audio:WSAudio, completeFunc:Function):void
			{
				var audioController:WSAudioController = new WSAudioController(DomainSettings.API_URL);
				showProgress("Updating Audio",100);
				audioController.update_ws_audios_by_audio_ID(audio, function(evt:ResultEvent):void
				{
					hideProgress();
					completeFunc(audio);
					dispatchEvent(new AudioEvent(AudioEvent.AUDIO_UPDATED_EVENT, audio,true));
				});
				
				
			}
			

		]]>
	</fx:Script>
	<mx:ToggleButtonBar excludeFrom="start" id="toggle_states" width="100%"
						horizontalGap="5"
						itemClick="toggle_states_itemClickHandler(event)"
						toggleOnClick="true"
						 dataProvider="{stateInfo}" labelField="label">
	</mx:ToggleButtonBar>	
	<s:DataGroup includeIn="start" width="100%" height="100%" dataProvider="{new ArrayCollection(stateInfo)}">
		<s:layout>
			<s:VerticalLayout gap="10" verticalAlign="middle" horizontalAlign="center"/>
		</s:layout>
		<s:itemRenderer>
			<fx:Component >
				<s:ItemRenderer>
				<buttons:WSIconButton width="220" height="60" fontWeight="bold" fontSize="12" label="{data.long_label}" icon="{data.icon}"   click="wsiconbutton1_clickHandler(data.state)">
					<fx:Script>
						<![CDATA[
							protected function wsiconbutton1_clickHandler(state:String):void
							{
								outerDocument.goToState(state);
							}
						]]>
					</fx:Script>
				</buttons:WSIconButton>
				</s:ItemRenderer>
			</fx:Component>
		</s:itemRenderer>
	</s:DataGroup>
	
	<audio:RecordVoiceForWordSmart  downloadByteArrayFunc="{downloadByteArray}" showTagger="{showAudioTagger}" uploadFunc="{uploadAudio}" registerFunc="{registerAudio}" convertToWAV="{convertToWAV}" convertToMP3="{convertToMP3}" id="cc_audio_recorder" includeIn="recorder" width="100%" height="100%">
		
	</audio:RecordVoiceForWordSmart>
	<audio:AudioProviderAudioFinder  id="cc_addFromProvider" showProgressFunc="{showProgress}" hideProgressFunc="{hideProgress}" showTagger="{showAudioTagger}" registerFunc="{registerAudio}" includeIn="addFromProvider" width="100%" height="100%">
		
	</audio:AudioProviderAudioFinder>
	<audio:AddAudioFromURL  id="cc_addFromWeb" showProgressFunc="{showProgress}" hideProgressFunc="{hideProgress}" showTagger="{showAudioTagger}" registerFunc="{registerAudio}" includeIn="addFromWeb" width="100%" height="100%">
		
	</audio:AddAudioFromURL>
	<audio:AddAudioFromFile  id="cc_addFromFile" showProgressFunc="{showProgress}" hideProgressFunc="{hideProgress}" showTagger="{showAudioTagger}" uploadFunc="{uploadAudio}" registerFunc="{registerAudio}"  includeIn="addFiles" width="100%" height="100%">
		
	</audio:AddAudioFromFile>
	<audio:AudioFinder includeIn="audioList" width="100%" height="100%" showAudioTagger="{showAudioTagger}" updateAudioFunc="{updateAudio}" recently_added="{recentlyAdded}">
		
	</audio:AudioFinder>
	<views:ProgressBar width="100%" id="progressBar" mode="manual" labelPlacement="center" enabled="false" includeInLayout="false" visible="false"/>
		
</s:Group>

/** * GOOGLE API - AS3 LIBRARY * * @author Joris Timmerman * @version 2.1 *  * GoogleFeeds - Parse, find or check RSS feeds using Google's Ajax Feed Api. * Build by Joris Timmerman, these classes uses the Google Ajax API *  * These classes are using methods and classes from the Adobe Core Libary, downloadable @ http://code.google.com/p/as3corelib/ *  * SPECIAL THANKS TO GOOGLE FOR PROVIDING THE AJAX API * THIS IS AN OPEN SOURCE PROJECT DELIVERED BY BOULEVART NV (www.boulevart.be) */package be.boulevart.google.ajaxapi.feeds {	import flash.events.Event;	import flash.events.EventDispatcher;	import flash.events.IOErrorEvent;	import flash.net.URLLoader;	import flash.net.URLRequest;	import flash.net.URLVariables;		import com.adobe.serialization.json.JSON;		import be.boulevart.google.ajaxapi.feeds.data.GoogleFeed;	import be.boulevart.google.ajaxapi.feeds.data.GoogleFeedFindResult;	import be.boulevart.google.ajaxapi.feeds.data.GoogleFeedLookupResult;	import be.boulevart.google.ajaxapi.feeds.data.types.GoogleFeedEntry;	import be.boulevart.google.apicore.GoogleAPIServiceURL;	import be.boulevart.google.apicore.GoogleApiKeyStore;	import be.boulevart.google.events.GoogleAPIErrorEvent;	import be.boulevart.google.events.GoogleApiEvent;		/**	 * @author joris	 */	public class GoogleFeeds extends EventDispatcher {		/**		 * Parse a feed		 * @param feedURL the url to the feed to parse		 * */		public function getFeed(feedURL : String) : void {			var serviceURL : String = GoogleAPIServiceURL.FEED_SERVICE;						var loader : URLLoader = new URLLoader();											var request : URLRequest = new URLRequest(serviceURL);						var vars : URLVariables = new URLVariables();			vars.v = "1.0";			vars.q = feedURL;						if(GoogleApiKeyStore.keyIsSet) {				vars.key = GoogleApiKeyStore.API_KEY;			}						request.data = vars;						loader.addEventListener(Event .COMPLETE, onResponse);			loader.addEventListener(IOErrorEvent.IO_ERROR, onIOError); 			loader.load(request);		}
		/**		 * Find a feed		 * @param terms find a blog or other feed using search tags		 * */		public function findFeed(terms : String) : void {			var serviceURL : String = GoogleAPIServiceURL.FEED_FIND_SERVICE;			var loader : URLLoader = new URLLoader();			var request : URLRequest = new URLRequest(serviceURL);						var vars : URLVariables = new URLVariables();			vars.v = "1.0";			vars.q = terms;						if(GoogleApiKeyStore.keyIsSet) {				vars.key = GoogleApiKeyStore.API_KEY;			}						request.data = vars;									loader.addEventListener(Event .COMPLETE, onFindResponse);			loader.addEventListener(IOErrorEvent.IO_ERROR, onIOError); 			loader.load(request);		}
		/**		 * Lookup a feed, checks if the given feed exists		 * @param feedURL Url to a possible feed to check		 * */		public function lookupFeed(feedURL : String) : void {			var serviceURL : String = GoogleAPIServiceURL.FEED_LOOKUP_SERVICE;			var loader : URLLoader = new URLLoader();									var request : URLRequest = new URLRequest(serviceURL);						var vars : URLVariables = new URLVariables();			vars.v = "1.0";			vars.q = feedURL;						if(GoogleApiKeyStore.keyIsSet) {				vars.key = GoogleApiKeyStore.API_KEY;			}						request.data = vars;									loader.addEventListener(Event.COMPLETE, onLookUpResponse);			loader.addEventListener(IOErrorEvent.IO_ERROR, onIOError); 			loader.load(request);		}		//-----------------------------RESPONSES-----------------------------
		private function onResponse(event : Event) : void {			var json : Object = JSON.decode("" + event.target.data);									if(json.responseData != null) {				var feed : GoogleFeed = new GoogleFeed();				json = json.responseData.feed;				feed.author = json.author;				feed.description = json.description;				feed.feedType = json.type;				feed.title = json.title;				feed.link = json.link;							for each(var obj:Object in json.entries) {					var entry : GoogleFeedEntry = new GoogleFeedEntry();					entry.author = obj.author;					entry.content = obj.content;					entry.contentSnippet = obj.contentSnippet;					entry.link = obj.link;					entry.title = obj.title;					entry.publishedDate = new Date(obj.publishedDate);					entry.categories = obj.categories as Array;					feed.entries.push(entry);				}										dispatchEvent(new GoogleApiEvent(GoogleApiEvent.FEEDS_GET_RESULT, feed));			}else {				dispatchEvent(new GoogleAPIErrorEvent(GoogleAPIErrorEvent.API_ERROR, json.responseDetails as String, json.responseStatus as int));			}		}
		private function onFindResponse(event : Event) : void {			var json : Object = JSON.decode("" + event.target.data);						if(json.responseData != null) {				var ff : GoogleFeedFindResult = new GoogleFeedFindResult();				json = json.responseData;				ff.query = json.query;							for each(var o:Object in json.entries) {					var entry : GoogleFeedEntry = new GoogleFeedEntry();					entry.contentSnippet = o.contentSnippet;					entry.link = o.link;					entry.title = o.title;					entry.url = o.url;					ff.entries.push(entry);				}								dispatchEvent(new GoogleApiEvent(GoogleApiEvent.FEEDS_FIND_RESULT, ff));			}else {				dispatchEvent(new GoogleAPIErrorEvent(GoogleAPIErrorEvent.API_ERROR, json.responseDetails as String, json.responseStatus as int));			}		}
		private function onLookUpResponse(event : Event) : void {			var json : Object = JSON.decode("" + event.target.data);				if(json.responseData != null) {						json = json.responseData;				var flur : GoogleFeedLookupResult = new GoogleFeedLookupResult();				flur.query = json.query;				flur.url = json.url;							dispatchEvent(new GoogleApiEvent(GoogleApiEvent.FEEDS_LOOKUP_RESULT, flur));			}else {				dispatchEvent(new GoogleAPIErrorEvent(GoogleAPIErrorEvent.API_ERROR, json.responseDetails as String, json.responseStatus as int));			}		}
		private function onIOError(event : IOErrorEvent) : void {  			dispatchEvent(new GoogleApiEvent(GoogleApiEvent.ON_ERROR, "IOERROR: " + event.text));		} 	}}
/** * GOOGLE API - AS3 LIBRARY *  * @author Joris Timmerman * @version 2.1 *  * GoogleBookSearch - Search books using Google BookSearch * Build by Joris Timmerman, these classes uses the Google Ajax API *  * These classes are using methods and classes from the Adobe Core Libary, downloadable @ http://code.google.com/p/as3corelib/ *  * SPECIAL THANKS TO GOOGLE FOR PROVIDING THE AJAX API * THIS IS AN OPEN SOURCE PROJECT DELIVERED BY BOULEVART NV (www.boulevart.be) */package be.boulevart.google.ajaxapi.search.books {	import flash.events.Event;	import flash.events.EventDispatcher;	import flash.events.IOErrorEvent;	import flash.net.URLLoader;	import flash.net.URLRequest;	import flash.net.URLVariables;		import com.adobe.serialization.json.JSON;	import com.adobe.utils.StringUtil;		import be.boulevart.google.ajaxapi.search.GoogleSearchResult;	import be.boulevart.google.ajaxapi.search.books.data.GoogleBook;	import be.boulevart.google.apicore.GoogleAPIServiceURL;	import be.boulevart.google.apicore.GoogleApiKeyStore;	import be.boulevart.google.events.GoogleAPIErrorEvent;	import be.boulevart.google.events.GoogleApiEvent;		/**	 * @author joris	 */	public class GoogleBookSearch extends EventDispatcher {		/**		 * Start search operation, when operation is done, will dispatch an GoogleSearchEvent.BOOK_SEARCH_RESULT event with an array of GoogleBook-objects.		 * Will deliver 8 results max, you can get more using the startValue param. (paging)		 * @param searchString search string, what do you wanna find?		 * @param onlyFullBooks Restrict results to only full books		 * @param startValue sets a start value for paging (fe. 9; delivers search results from result 9 up to 16)		 * @param lang set main language using language code		 */		public function search(searchString : String,startValue : int = 0,onlyFullBooks : Boolean = false,lang : String = "") : void {			var serviceURL : String = GoogleAPIServiceURL.SEARCH_BOOKS_SERVICE;						var loader : URLLoader = new URLLoader();			var request : URLRequest = new URLRequest(serviceURL);						var vars : URLVariables = new URLVariables();			vars.v = "1.0";			vars.q = searchString;						if(startValue > 0) {				vars.start = startValue;			}						vars.rsz = "large";			 				if(StringUtil.trim(lang).length > 0) {				vars.hl = "" + lang;			}							if(onlyFullBooks) {				vars.as_brr =  1;			}											if(GoogleApiKeyStore.keyIsSet) {				vars.key = GoogleApiKeyStore.API_KEY;			}						request.data = vars;						loader.addEventListener(Event .COMPLETE, onResponse);			loader.addEventListener(IOErrorEvent.IO_ERROR, onIOError); 			loader.load(request);		}		private function onResponse(event : Event) : void {			var json : Object = JSON.decode("" + event.target.data);						if(json.responseData != null) {				var results : Array = json.responseData.results as Array;				var resultaten : Array = new Array();				for each(var data:Object in results) {					var item : GoogleBook = new GoogleBook();					item.title = data.title;					item.titleNoFormatting = data.titleNoFormatting;					item.unEscapedURL = data.unescapedUrl;					item.authors = data.authors;					item.bookId = data.bookId;					item.publishedYear = data.publishedYear;					item.pageCount = data.pageCount;					item.thumbnailHTML = "" + data.thumbnailHtml;									resultaten.push(item);				}							var searchItem : GoogleSearchResult = new GoogleSearchResult();				if(json.responseData.cursor.currentPageIndex != null) {					searchItem.currentPageIndex = json.responseData.cursor.currentPageIndex;				}				if(json.responseData.cursor.pages != null) {					searchItem.numPages = json.responseData.cursor.pages.length;				}				searchItem.results = resultaten;							if(json.responseData.cursor.estimatedResultCount != null) {					searchItem.estimatedNumResults = json.responseData.cursor.estimatedResultCount;				}							dispatchEvent(new GoogleApiEvent(GoogleApiEvent.BOOK_SEARCH_RESULT, searchItem));			}else {				dispatchEvent(new GoogleAPIErrorEvent(GoogleAPIErrorEvent.API_ERROR, json.responseDetails as String, json.responseStatus as int));			}		}		private function onIOError(event : IOErrorEvent) : void {  			dispatchEvent(new GoogleApiEvent(GoogleApiEvent.ON_ERROR, "IOERROR: " + event.text));		} 	}}
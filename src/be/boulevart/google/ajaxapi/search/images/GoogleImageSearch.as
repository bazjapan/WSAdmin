/** * GOOGLE API - AS3 LIBRARY *  * @author Joris Timmerman * @version 2.1 *  * GoogleImageSearch - Search images using Google Images Search * Build by Joris Timmerman, these classes uses the Google Ajax API *  * These classes are using methods and classes from the Adobe Core Libary, downloadable @ http://code.google.com/p/as3corelib/ *  * SPECIAL THANKS TO GOOGLE FOR PROVIDING THE AJAX API * THIS IS AN OPEN SOURCE PROJECT DELIVERED BY BOULEVART NV (www.boulevart.be) */package be.boulevart.google.ajaxapi.search.images {	import be.boulevart.google.ajaxapi.search.GoogleSearchResult;	import be.boulevart.google.ajaxapi.search.images.data.GoogleImage;	import be.boulevart.google.ajaxapi.search.images.data.types.GoogleImageSafeMode;	import be.boulevart.google.apicore.GoogleAPIServiceURL;	import be.boulevart.google.apicore.GoogleApiKeyStore;	import be.boulevart.google.events.GoogleAPIErrorEvent;	import be.boulevart.google.events.GoogleApiEvent;		import com.adobe.serialization.json.JSON;	import com.adobe.utils.StringUtil;		import flash.events.Event;	import flash.events.EventDispatcher;	import flash.events.IOErrorEvent;	import flash.net.URLLoader;	import flash.net.URLRequest;	import flash.net.URLVariables;		/**	 * @author joris	 */	public class GoogleImageSearch extends EventDispatcher {		/**		 * Start search operation, when operation is done, will dispatch an GoogleSearchEvent.IMAGE_SEARCH_RESULT event with an array of GoogleImage-objects.		 * Will deliver 8 results max, you can get more using the startValue param. (paging)		 * @param searchString search string, what do you wanna find?		 * @param startValue sets a start value for paging (fe. 9; delivers search results from result 9 up to 16)		 * @param safeMode This optional argument supplies the search safety level, you can find all values in GoogleImageSafeMode (package data.type)		 * @param size Restrict results to images of a certain size, you can find all values in GoogleImageSize (package data.type)		 * @param colorization Restrict results to images of a certain colorization, you can find all values in GoogleImageColorization (package data.type)		 * @param imageColor NEW This optional argument tells the image search system to filter the search to images of the specified color, you can find all allowed values in GoogleImageColor (package data.type)		 * @param imageType Restrict results to images of a certain type, you can find all values in GoogleImageType (package data.type)		 * @param filetype Restrict results to images with a certain extension, you can find all values in GoogleImageFiletype (package data.type)		 * @param restrictToCreativeCommons Restrict results to CreativeCommons licensed images		 * @param lang set main language using language code		 * @param restrictToDomain NEW This optional argument tells the image search system to restrict the search to images within the specified domain <br/> Note: This restriction may restrict results to images found on pages AT the given URL and/or images WITH the given URL. 		 */		public function search(searchString : String,startValue : int = 0,safeMode:String = "moderate", size:String = "",colorization : String = "",imageColor : String = "",imageType : String = "",filetype : String = "",restrictToCreativeCommons : Boolean = false,lang : String = "",restrictToDomain : String = "") : void {						var serviceURL : String = GoogleAPIServiceURL.SEARCH_IMAGES_SERVICE;						var loader : URLLoader = new URLLoader();					var request : URLRequest = new URLRequest(serviceURL);						var vars : URLVariables = new URLVariables();			vars.v = "1.0";			vars.q = searchString;						if(startValue > 0) {				vars.start = startValue;			}						vars.rsz = "large";			 				if(StringUtil.trim(lang).length > 0) {				vars.hl = lang;			}								if(StringUtil.trim(safeMode).length > 0) {				vars.safe = "" + safeMode;			}						if(StringUtil.trim(size).length > 0) {				vars.imgsz = size;			}						if(StringUtil.trim(colorization).length > 0) {				vars.imgc = colorization;			}						if(StringUtil.trim(imageColor).length > 0) {				vars.imgcolor = imageColor;			}						if(StringUtil.trim(imageType).length > 0) {				vars.imgtype = imageType;			}						if(StringUtil.trim(filetype).length > 0) {				vars.as_filetype = filetype;			}						if(restrictToCreativeCommons) {				vars.restrict = "cc_attribute";			}						if(StringUtil.trim(restrictToDomain).length > 0) {				vars.as_sitesearch = restrictToDomain;			}						if(GoogleApiKeyStore.keyIsSet) {				vars.key = GoogleApiKeyStore.API_KEY;			}						request.data = vars;						loader.addEventListener(Event .COMPLETE, onResponse);			loader.addEventListener(IOErrorEvent.IO_ERROR, onIOError); 			loader.load(request);		}		private function onResponse(event : Event) : void {			var json : Object = JSON.decode("" + event.target.data);						if(json.responseData != null) {				var results : Array = json.responseData.results as Array;				var resultaten : Array = new Array();				for each(var data:Object in results) {					var item : GoogleImage = new GoogleImage();					item.content = data.content;					item.title = data.title;					item.titleNoFormatting = data.titleNoFormatting;					item.unescapedUrl = data.unescapedUrl;					item.url = data.url;					item.visibleUrl = data.visibleUrl;								item.contentNoFormatting = data.contentNoFormatting;					item.height = data.height;					item.width = data.width;					item.originalContextUrl = data.originalContextUrl;					item.thumbHeight = data.tbHeight;					item.thumbWidth = data.tbWidth;					item.thumbUrl = data.tbUrl;					resultaten.push(item);				}				var searchItem : GoogleSearchResult = new GoogleSearchResult();				if(json.responseData.cursor.currentPageIndex != null) {					searchItem.currentPageIndex = json.responseData.cursor.currentPageIndex;				}				if(json.responseData.cursor.pages != null) {					searchItem.numPages = json.responseData.cursor.pages.length;				}				searchItem.results = resultaten;							if(json.responseData.cursor.estimatedResultCount != null) {					searchItem.estimatedNumResults = json.responseData.cursor.estimatedResultCount;				}				dispatchEvent(new GoogleApiEvent(GoogleApiEvent.IMAGE_SEARCH_RESULT, searchItem));			}else {				dispatchEvent(new GoogleAPIErrorEvent(GoogleAPIErrorEvent.API_ERROR, json.responseDetails as String, json.responseStatus as int));			}		}		private function onIOError(event : IOErrorEvent) : void {  			dispatchEvent(new GoogleApiEvent(GoogleApiEvent.ON_ERROR, "IOERROR: " + event.text));		} 	}}
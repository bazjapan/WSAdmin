/** * GOOGLE API - AS3 LIBRARY * * @author Joris Timmerman *  * GoogleWebSearch - Search the web using Google, uses Google We Search, delivers same results as you would search with the websinterface. * Build by Joris Timmerman, these classes uses the Google Ajax API *  * These classes are using methods and classes from the Adobe Core Libary, downloadable @ http://code.google.com/p/as3corelib/ *  * SPECIAL THANKS TO GOOGLE FOR PROVIDING THE AJAX API * THIS IS AN OPEN SOURCE PROJECT DELIVERED BY BOULEVART NV (www.boulevart.be) */package be.boulevart.google.ajaxapi.search.web {	import flash.events.Event;	import flash.events.EventDispatcher;	import flash.events.IOErrorEvent;	import flash.net.URLLoader;	import flash.net.URLRequest;	import flash.net.URLVariables;		import com.adobe.serialization.json.JSON;	import com.adobe.utils.StringUtil;		import be.boulevart.google.ajaxapi.search.GoogleSearchResult;	import be.boulevart.google.ajaxapi.search.web.data.GoogleWebItem;	import be.boulevart.google.apicore.GoogleAPIServiceURL;	import be.boulevart.google.apicore.GoogleApiKeyStore;	import be.boulevart.google.events.GoogleAPIErrorEvent;	import be.boulevart.google.events.GoogleApiEvent;		/**	 * @author joris	 */	public class GoogleWebSearch extends EventDispatcher {		/**		 * Start search operation, when operation is done, will dispatch an GoogleSearchEvent.WEB_SEARCH_RESULT event with an array of GoogleWebSearchItem-objects.		 * Will deliver 8 results max, you can get more using the start param. (paging)		 * @param searchString search string, what do you wanna find?		 * @param start sets a start value for paging (fe. 9; delivers search results from result 9 up to 16)		 * @param lang set main language using language code		 * @param safeMode NEW This optional argument supplies the search safety level, you can find all values in GoogleWebSafeMode (package data.type)		 * @param languageRestrict NEW This optional argument allows the caller to restrict the search to documents written in a particular language (e.g., lr=lang_ja). This list contains the permissible set of values.		 * @param duplicateFilter NEW This optional argument controls turning on or off the duplicate content filter (default on)		 * @param countryCode NEW This optional argument allows the caller to tailor the results to a specific country. The value should be a valid country code (e.g. uk, de, etc.). If this argument is not present, then the system will us a value based on the domain used to load the API (e.g. http://www.google.com/jsapi). If the API loader was not used, a value of "us" is assumed.		 * @param customSearchEngineID NEW This optional argument supplies the unique id for the Custom Search Engine that should be used for this request (e.g., customSearchEngineID=000455696194071821846:reviews).		 * @param customSearchEngineRef NEW This optional argument supplies the url of a linked Custom Search Engine specification that should be used to satisfy this request (e.g., cref=http%3A%2F%2Fwww.google.com%2Fcse%2Fsamples%2Fvegetarian.xml).		 */		public function search(searchString : String,start : int = 0,lang : String = "",safeMode : String = "",languageRestrict : String = "",		duplicateFilter : Boolean = true,countryCode : String = "",customSearchEngineID : String = "",customSearchEngineRef : String = "") : void {			var serviceURL : String = GoogleAPIServiceURL.SEARCH_WEB_SERVICE;						var loader : URLLoader = new URLLoader();									var request : URLRequest = new URLRequest(serviceURL);						var vars : URLVariables = new URLVariables();			vars.v = "1.0";			vars.q = searchString;						if(start > 0) {				vars.start = start;			}						vars.rsz = "large";			 				if(StringUtil.trim(lang).length > 0) {				vars.hl = "" + lang;			}							if(StringUtil.trim(safeMode).length > 0) {				vars.safe = safeMode;			}							if(StringUtil.trim(languageRestrict).length > 0) {				vars.lr = languageRestrict;			}						if(!duplicateFilter) {				vars.filter = 0;			}						if(StringUtil.trim(countryCode).length > 0) {				vars.gl = countryCode;			}						if(StringUtil.trim(customSearchEngineID).length > 0) {				vars.cx = customSearchEngineID;			}						if(StringUtil.trim(customSearchEngineRef).length > 0) {				vars.cref = customSearchEngineRef;			}									if(GoogleApiKeyStore.keyIsSet) {				vars.key = GoogleApiKeyStore.API_KEY;			}						request.data = vars;									loader.addEventListener(Event.COMPLETE, onResponse);			loader.addEventListener(IOErrorEvent.IO_ERROR, onIOError); 			loader.load(request);		}		private function onResponse(event : Event) : void {			var json : Object = JSON.decode("" + event.target.data);						if(json.responseData != null) {				var results : Array = json.responseData.results as Array;				var resultaten : Array = new Array();										for each(var data:Object in results) {					var item : GoogleWebItem = new GoogleWebItem();					item.cacheUrl = data.cacheUrl;					item.content = data.content;					item.title = data.title;					item.titleNoFormatting = data.titleNoFormatting;					item.unescapedUrl = data.unescapedUrl;					item.url = data.url;					item.visibleUrl = data.visibleUrl;					resultaten.push(item);				}							var searchItem : GoogleSearchResult = new GoogleSearchResult();				if(json.responseData.cursor.currentPageIndex != null) {					searchItem.currentPageIndex = json.responseData.cursor.currentPageIndex;				}				if(json.responseData.cursor.pages != null) {					searchItem.numPages = json.responseData.cursor.pages.length;				}				searchItem.results = resultaten;							if(json.responseData.cursor.estimatedResultCount != null) {					searchItem.estimatedNumResults = json.responseData.cursor.estimatedResultCount;				}							dispatchEvent(new GoogleApiEvent(GoogleApiEvent.WEB_SEARCH_RESULT, searchItem));			}else {				dispatchEvent(new GoogleAPIErrorEvent(GoogleAPIErrorEvent.API_ERROR, json.responseDetails as String, json.responseStatus as int));				}		}		private function onIOError(event : IOErrorEvent) : void {  			dispatchEvent(new GoogleApiEvent(GoogleApiEvent.ON_ERROR, "IOERROR: " + event.text));		} 	}}